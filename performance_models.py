# -*- coding: utf-8 -*-
"""Performance_models.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KENs3L4v8jCxgZpB_F7EZK5u2CVLFarR
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Load the datasets
players_df = pd.read_excel("Players.xlsx")
transfer_values_df = pd.read_csv("Transfer_Values.csv")

# Corrected convert market values to numeric function
def convert_market_value(value):
    # Check if the value is already a numeric type (float or int)
    if isinstance(value, (float, int)):
        return value
    if 'm' in value:
        return float(value.replace('€', '').replace('m', ''))
    elif 'k' in value:
        return float(value.replace('€', '').replace('k', '')) / 1000
    return float(value)

# Apply the conversion
transfer_values_df['Market Value'] = transfer_values_df['Market Value'].apply(convert_market_value)

# Merge the datasets
merged_df = pd.merge(players_df, transfer_values_df, left_on='Player', right_on='Name', how='inner')

# Prepare the data for regression
predictors = ['Age', 'Min', 'Gls', 'Ast', 'xG']  # Basic predictors
categorical_features = ['Pos']  # Categorical feature for position
target = 'Market Value'  # Target variable

# Preprocessing for numerical and categorical data
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), predictors),
        ('cat', OneHotEncoder(), categorical_features)])

# Define models for comparison
models = {
    'Linear Regression': LinearRegression(),
    'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42),
    'Gradient Boosting': GradientBoostingRegressor(n_estimators=100, random_state=42)
}

# Data selection
X = merged_df[predictors + categorical_features]
y = merged_df[target]

# Data splitting
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training and evaluation
results = {}
for name, model in models.items():
    # Pipeline for preprocessing and model fitting
    pipeline = Pipeline(steps=[('preprocessor', preprocessor), ('model', model)])
    pipeline.fit(X_train, y_train)  # Training

    # Evaluation
    y_pred = pipeline.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_test, y_pred)

    results[name] = (mse, rmse, r2)

# Display results
for model, metrics in results.items():
    print(f"{model} - MSE: {metrics[0]:.2f}, RMSE: {metrics[1]:.2f}, R^2: {metrics[2]:.2f}")